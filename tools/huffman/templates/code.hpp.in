#ifndef CODE_HPP
#define CODE_HPP

namespace Code {

// TODO: maybe move to separate compilation unit
%% for sym in map
static uint8_t Symbol{{ loop.index0 }}Value[{{ sym.value.length }}] = { {{ sym.value.data|join(',') }} };
%% endfor

/// returns number of bits matched
/// 0 indicates an error
static inline uint32_t decode_symbol(const CodeBits& input, Slice<uint8_t>& output) {
	uint32_t matched = 0;
%% for sym in map
	%% if loop.first
	if((matched = Symbol<{{ sym.code.hex }}, {{ sym.code.length }}>::match(input))) {
	%% else
	} else if((matched = Symbol<{{ sym.code.hex }}, {{ sym.code.length }}>::match(input))) {
	%% endif
		if(output.write(Symbol{{ loop.index0 }}Value)) {
			return matched;
		} else {
			return 0;
		}
%% endfor
	}
	// Error: should not get here!
	return 0;
}

} // namespace Code

#endif // CODE_HPP
