# SConstruct
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
#
# This file is part of awap.
#
#

import os

# root path of the awap repo
path_awap_root = os.path.abspath('../../..')
# path to awap scons tools
path_awap_scons = os.path.join(path_awap_root, 'scons')
# path to the xpcc scons tools
path_xpcc_scons = os.path.join(path_awap_root, 'ext', 'xpcc', 'scons', 'site_tools')


# create the scons environment which contains the custom awap build tools
env = Environment(toolpath = [path_awap_scons], tools = ['awap'])
# tell awap where to look for agents
env.AppendUnique(AWAP_AGENT_PATH = '../../agents')
# tell awap where to look for communication modules
env.AppendUnique(AWAP_COMMUNICATION_PATH = '../../communication')
env['AWAP_JADE_JAR'] = os.path.abspath(os.path.join(path_awap_root, '..', 'jade-mirror', 'lib', 'jade.jar'))

# build awap configuration
env.Architecture('amd64')
env.Awap(configuration = '../../configuration.xml')
libmote_a = env['AWAP_LIB_MOTE_A']
libmote_include = env['AWAP_LIB_MOTE_INCLUDE']

# turn argents into c file using the awap environemnt
sources  = libmote_a
sources += env.AgentCArray("build/di_temperature_agent.c", "TemperatureSensor")
sources += env.AgentCArray("build/di_consumer_agent.c", "SimpleTemperatureConsumer")

# build local source using xpcc
env = Environment(tools = ['xpcc'], toolpath = [path_xpcc_scons])

# HACK: main sources need to be first in source list, in order to avoid linker
#       problems
sources = env.FindFiles('src').sources + sources
env.Append(CPPPATH = libmote_include)

# debug build
env['CXXFLAGS'].append("-O0")
env['CXXFLAGS'].append("-g")
env['CCFLAGS'].append("-fsanitize=address")
env['LINKFLAGS'].append("-fsanitize=address")

# build the program
mote = env.Program(target = env['XPCC_CONFIG']['general']['name'], source = sources)

# build the xpcc library
env.XpccLibrary()

# create a file called 'defines.hpp' with all preprocessor defines if necessary
env.Defines()

env.Alias('mote', mote)

# run alias
env.Alias('run', env.Command('run_mote', mote, '{} {}'.format(mote[0].abspath, "")))

env.Default('mote')
