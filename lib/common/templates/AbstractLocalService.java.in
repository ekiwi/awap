package de.rwth_aachen.awap.service.local;

import de.rwth_aachen.awap.Agent;
import de.rwth_aachen.awap.LocalService;
import de.rwth_aachen.awap.Message;
import de.rwth_aachen.awap.RemoteAgent;

public abstract class {{service.name}} extends LocalService {
%% for prop in service.properties
	public {{ prop.java.type }} {{ prop.name | camelCase }};
%% endfor
	public {{service.name}}(Agent parent{{ service.java.initializer_list }}) {
		super(parent, {{ service.id }});
%% for prop in service.properties
		this.{{ prop.name | camelCase }} = {{ prop.name | camelCase }};
%% endfor
	}
	// message handlers
%% for msg in service.messages
	%% if msg.rx
	public static class {{ msg.name }} extends Message {
	%% for field in msg.fields
			public {{ field.java.type }} {{ field.name }};
	%% endfor
	}
	public abstract void onReceive({{ msg.name }} msg);
	%% endif
	%% if msg.tx
	public static class {{ msg.name }} extends Message {
	%% for field in msg.fields
			public {{ field.java.type }} {{ field.name }};
	%% endfor
			public {{ msg.name }}(RemoteAgent receiver{{ msg.java.initializer_list }}){
				this.remoteAgent = receiver;
		%% for field in msg.fields
				this.{{ field.name }} = {{ field.name}};
		%% endfor
			}
	}
	// public abstract void onFailedToSend({{ msg.name }} msg);
	public void send({{ msg.name }} msg) {
		msg.serviceTypeId = {{ service.id }};
		this.parent.node.send(msg);
	}
	%% endif
%% endfor

	public boolean handleMessage(Message msg) {
%% for msg in service.messages
	%% if msg.rx
		%% if loop.first
		if(msg instanceof {{ msg.name }}) {
		%% else
		} else if(msg instanceof {{ msg.name }}) {
		%% endif
			this.onReceive(({{ msg.name }})msg);
			return true;
	%% endif
%% endfor
		}
		return false;	// invalid message
	}

}

