package de.rwth_aachen.awap.service.remote;

import de.rwth_aachen.awap.RemoteService;
import de.rwth_aachen.awap.ServiceProperty;

public final class {{service.name}} extends RemoteService {
	public {{service.name}}() {
		// TODO: set parent, serviceId etc...
	}

	public static void registerListener(I{{service.name}}Client client, ServiceProperty... properties) {
		// TODO: somehow propagate correct service type
		//this.df.installServiceListener(this, properties);
	}

	// properties that can be used to register a listener
%% for prop in service.properties
	public static class {{ prop.name }}Property extends ServiceProperty {
		public {{ prop.java.type }} value;
		public {{ prop.name }}Property({{ prop.java.type }} value) {
			this.value = value;
		}
	}
%% endfor

	// message handlers
%% for msg in service.messages
	%# Remember, that tx and rx are reversed, now that we are the client!
	%% if msg.tx
	public static class {{ msg.name }} extends Message {
	%% for field in msg.fields
			public {{ field.java.type }} {{ field.name }};
	%% endfor
	}
	%% endif
	%# Remember, that tx and rx are reversed, now that we are the client!
	%% if msg.rx
	public static class {{ msg.name }} extends Message {
	%% for field in msg.fields
			public {{ field.java.type }} {{ field.name }};
	%% endfor
			public {{ msg.name }}({{ msg.java.initializer_list }}){
		%% for field in msg.fields
				this.{{ field.name }} = {{ field.name}};
		%% endfor
			}
	}
	public void send({{ msg.name }} msg) {
		msg.service = this;
		this.parent.com.send(msg);
	}
	%% endif
%% endfor
}

