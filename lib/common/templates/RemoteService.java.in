/**
 * {{service.name}}.java
 *
 * Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
 *
 * This file is part of awap.
 */

package de.rwth_aachen.awap.service.remote;

import de.rwth_aachen.awap.Agent;
import de.rwth_aachen.awap.BroadcastMessage;
import de.rwth_aachen.awap.RemoteAgent;
import de.rwth_aachen.awap.RemoteService;
import de.rwth_aachen.awap.messages.{{ service.name }}.*;
import de.rwth_aachen.awap.service.{{ service.name }}Description;

public final class {{service.name}} extends RemoteService {
	public {{service.name}}(Agent parent, RemoteAgent remoteAgent, byte remoteServiceId) {
		super(parent, remoteAgent, remoteServiceId);
	}

	public static class Type
	{
		Agent parent;
		{{ service.name }}Description description = new {{ service.name }}Description({{ service.id }});
		public Type(Agent parent) {
			this.parent = parent;
		}

		// add properties to describe type
%% for prop in service.properties
		public Type {{ prop.name | camelCase}}({{ prop.java.type }} value) {
			this.description.doNotCare[{{ prop.id }}] = false;
			this.description.{{ prop.name | camelCase }} = value;
			return this;
		}
%% endfor

		// these methods can be used to broadcast messages to a certain type of sensors
%% for msg in service.messages
	%% if msg.rx
		public void send({{ msg.name }} msg) {
			this.parent.node.send(new BroadcastMessage(msg, this.description));
		}
	%% endif
%% endfor
	}

	// message handlers
%% for msg in service.messages
	%# Remember, that tx and rx are reversed, now that we are the client!
	%% if msg.rx
	public void send({{ msg.name }} msg) {
		msg.serviceTypeId = {{ service.id }};
		msg.setRemoteAgent(this.remoteAgent);
		this.parent.node.send(msg);
	}
	%% endif
%% endfor
}

