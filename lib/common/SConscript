# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


Import('env')
import os

libname = 'common'

# tell scons how to generate some files
generated_path = os.path.join(env['AWAP_BUILDPATH'], 'lib', libname, 'generated')
generated_files = []

communication = env.GetCommunicationDict()

service_path = os.path.join(generated_path, *("de.rwth_aachen.awap.service".split('.')))
service_template = os.path.join('templates', 'abstract_service.java.in')
for service in communication['services']:
	target = os.path.join(service_path, "Abstract{name}.java".format(**service))
	generated_files += env.Template(
		target=target,
		source=service_template,
		substitutions={'service': service})

enum_path = os.path.join(generated_path, *("de.rwth_aachen.awap.enums".split('.')))
enum_template = os.path.join('templates', 'enum.java.in')
for enum in communication['enums']:
	target = os.path.join(enum_path, "{name}.java".format(**enum))
	generated_files += env.Template(
		target=target,
		source=enum_template,
		substitutions={'enum': enum})


env.Alias("libcommon.generate", generated_files)

# build ostfriesentee library
base_lib = SConscript([env['OFT_ROOT'] + '/lib/base/SConscript'], exports = 'env')
util_lib = SConscript([env['OFT_ROOT'] + '/lib/util/SConscript'], exports = 'env')

source = ['java'] + generated_files
lib = env.OstfriesenteeLibrary(libname, source, OFT_LIBS=['base', 'util'])

# TODO: build host library

Return('lib')
