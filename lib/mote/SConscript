# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


Import('env')
import os

libname = 'awap-node'
lib_path = os.path.join(env['AWAP_BUILDPATH'], 'lib', libname)

# tell scons how to generate some files
generated_path = os.path.join(lib_path, 'generated')
generated_files = []

# TODO: generate files

env.Alias(libname + ".generate", generated_files)

# build lib
env['AWAP_LIB_MOTE_INCLUDE'] = os.path.abspath('include')

# load ostfriesentee

runtime = env.OstfriesenteeRuntime(['base', 'util', 'ostfriesentee', 'awap-common'])
runtime_c = [ff for ff in runtime if str(ff).endswith(".c")]
runtime_a = [ff for ff in runtime if str(ff).endswith(".a")]


env.VariantDir(variant_dir=lib_path, src_dir='src')
env.Append(CPPPATH = env['AWAP_LIB_MOTE_INCLUDE'])
source = env.Glob(os.path.join(lib_path, '*.cpp')) + runtime_c

libmote = env.StaticLibrary(os.path.join(lib_path, libname), source)
# add libmote twice because of cicular dependencies
libs = libmote + runtime_a + libmote
env['AWAP_LIB_MOTE_A'] = libs
env.Alias(libname , libmote)
Return('libmote')
