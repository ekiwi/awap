# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


Import('env')
import os

libname = 'awap-node'
lib_path = os.path.join(env['AWAP_BUILDPATH'], 'lib', libname)

# tell scons how to generate some files
generated_include_path = os.path.join(lib_path, 'generated')
generated_path = os.path.join(generated_include_path, 'generated')
env['AWAP_LIB_MOTE_GENERATED_INCLUDE_PATH'] = generated_include_path
generated_files = []

communication = env.GetCommunicationDict()
templates = env.Glob('cpp/templates/*.in')

for template in templates:
	generated_name = os.path.splitext(os.path.basename(str(template)))[0]
	generated_files += env.Template(
		target=os.path.join(generated_path, generated_name),
		source=template,
		substitutions=communication)

env.Alias(libname + ".generate", generated_files)

# build lib
env['AWAP_LIB_MOTE_INCLUDE'] = os.path.abspath('include')

# build ostfriesentee library
libmote_oft = env.OstfriesenteeLibrary('awap-mote', ['java', 'c'], OFT_LIBS=['base', 'util', 'awap-common'])
env.Alias('awap-mote.oft', libmote_oft)

# load ostfriesentee
runtime = env.OstfriesenteeRuntime(['base', 'util', 'ostfriesentee', 'awap-common', 'awap-mote'])
runtime_c = [ff for ff in runtime if str(ff).endswith(".c")]
runtime_a = [ff for ff in runtime if str(ff).endswith(".a")]

# build c++ library
env.VariantDir(variant_dir=lib_path, src_dir='cpp')
env.Append(CPPPATH = env['AWAP_LIB_MOTE_INCLUDE'])
# some headerfiles from xpcc are used
# env.Append(CPPPATH = os.path.join('..', '..', 'ext', 'xpcc', 'src'))
source  = env.Glob(os.path.join(lib_path, '*.cpp')) + runtime_c
source += env.Glob(os.path.join(generated_path, '*.cpp'))

lib_env = env.Clone()
lib_env.Append(CPPPATH = ['cpp'])
lib_env.Append(CPPPATH = [generated_include_path])

# build huffman decoder, if compression enabled
if 'AWAP_AGENT_FORMAT_COMPRESS' in env and env['AWAP_AGENT_FORMAT_COMPRESS']:
	huffman_path = os.path.join(env['AWAP_ROOT'], 'tools', 'huffman')
	huffman_build_path = os.path.join(lib_path, 'huffman')
	huffman_src_path = os.path.join(huffman_path, 'src')
	lib_env.Append(CPPPATH = [huffman_src_path])
	lib_env.VariantDir(variant_dir=huffman_build_path, src_dir=huffman_src_path)
	source += env.Template(
				target=os.path.join(generated_path, 'code.hpp'),
				source=os.path.join(huffman_path, 'templates', 'code.hpp.in'),
				substitutions=env['AWAP_AGENT_FORMAT_COMPRESSSION_CODE'])
	source += env.Glob(os.path.join(huffman_build_path, '*.cpp'))
	lib_env.Append(CCFLAGS = '-DAGENT_COMPRESSION_ENABLED')

libmote = lib_env.StaticLibrary(os.path.join(lib_path, libname), source)
# add libmote twice because of cicular dependencies
libs = libmote + runtime_a + libmote
env['AWAP_LIB_MOTE_A'] = libs
env.Alias(libname , libmote)
Return('libmote')
