/**
 * service_descriptions.hpp
 *
 * Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
 *
 * This file is part of awap.
 */

#ifndef GENERATED_SERVICE_DESCRIPTIONS_HPP
#define GENERATED_SERVICE_DESCRIPTIONS_HPP

#include <util.hpp>
#include <common.hpp>
#include <generated/configuration.hpp>
#include <jlib_awap-common.hpp>

namespace awap {
namespace generated {

struct ServiceDescription {

static constexpr size_t MaxPropBytes = generated::Configuration::MaxPropertyByteCount;
static constexpr size_t PropertyCount = divideCeil(MaxPropBytes, sizeof(uint32_t));

%% for service in services
using {{ service.name }}DescriptionStruct =
	::de::rwth_aachen::awap::service::{{ service.name }}Description::UnderlyingType;

struct {{ service.name }}Properties {
	static constexpr size_t Bytes = {{ service.properties.bytes }};
%% for prop in service.properties.fields
	{{ prop.cpp.type }} {{ prop.name }};
%% endfor
};
%% endfor

static inline ServiceTypeId getServiceTypeId(ref_t java_desc) {
	// check Java class type
	auto descClassId = dj_vm_getRuntimeClass(dj_exec_getVM(), dj_mem_getChunkId(REF_TO_VOIDP(java_desc)));
	if(descClassId.infusion != ::awap::getAwapCommonInfusion().getUnderlying()) {
		return 255;	// class is not from the awap-common infusion
	}

	switch(descClassId.entity_id) {
%% for service in services
	case AWAP_COMMON_CDEF_de_rwth_aachen_awap_service_{{ service.name }}Description:
		return {{ service.id }};
%% endfor
	default:
		return 255;
	}
}

static inline size_t getPropertySize(ServiceTypeId serviceType) {
	switch(serviceType) {
%% for service in services
	case {{ service.id }}:	// {{ service.name }}
		return {{ service.properties_bytes }};
%% endfor
	default:
		return 0;
	}
}

static inline uint8_t toBroadcastHeader(ref_t java_desc) {
	// check Java class type
	auto descClassId = dj_vm_getRuntimeClass(dj_exec_getVM(), dj_mem_getChunkId(REF_TO_VOIDP(java_desc)));
	if(descClassId.infusion != ::awap::getAwapCommonInfusion().getUnderlying()) {
		return 0;	// class is not from the awap-common infusion
	}

	switch(descClassId.entity_id) {
%% for service in services
	case AWAP_COMMON_CDEF_de_rwth_aachen_awap_service_{{ service.name }}Description:
	{
	%% if service.properties.fields | length > 0
		auto java_data = static_cast<const {{ service.name }}DescriptionStruct*>(REF_TO_VOIDP(java_desc));
	%% endif
	return 0
	%% for prop in service.properties.fields
		| (((java_data->{{ prop.name }}DoNotCare)? 0 : 1) << (7 - {{ prop.id }}))
	%% endfor
		;
	}
%% endfor
	default:
		return 0;
	}
}

static inline bool toQueryMask(
	ServiceTypeId serviceTypeId,
	uint8_t broadcastHeader,
	Slice<uint32_t> mask) {

	// make sure output is large enough
	if(mask.length < PropertyCount) {
		return false;
	}

	switch(serviceTypeId) {
%% for service in services
	case {{ service.id }}:	// {{ service.name }}
	{
	%% if service.properties.bytes > 0
		{{ service.name }}Properties prop;
		%% for prop in service.properties.fields
		prop.{{ prop.name }} = (broadcastHeader & (1 << (7 - {{ prop.id }})))? (1<<{{ prop.size * 8 }}) - 1 : 0;
		%% endfor
		auto data = reinterpret_cast<uint8_t*>(mask.data);
		std::memcpy(mask.data, &prop, {{ service.name }}Properties::Bytes);
	%% endif
		return true;
	}
%% endfor
	default:
		return false;
	}
}

static inline bool toQueryMask(ref_t java_desc, Slice<uint32_t> mask) {
	return toQueryMask(
		getServiceTypeId(java_desc),
		toBroadcastHeader(java_desc),
		mask);
}

static inline size_t marshal(ref_t java_desc, Slice<uint8_t> output) {
	// check Java class type
	auto descClassId = dj_vm_getRuntimeClass(dj_exec_getVM(), dj_mem_getChunkId(REF_TO_VOIDP(java_desc)));
	if(descClassId.infusion != ::awap::getAwapCommonInfusion().getUnderlying()) {
		return 0;	// class is not from the awap-common infusion
	}

	switch(descClassId.entity_id) {
%% for service in services
	case AWAP_COMMON_CDEF_de_rwth_aachen_awap_service_{{ service.name }}Description:
	{
	%% if service.properties.bytes > 0
		if(output.length < {{ service.properties_bytes }}) {
			return 0;
		}
		{{ service.name }}Properties prop;
		auto java_data = static_cast<const {{ service.name }}DescriptionStruct*>(REF_TO_VOIDP(java_desc));
		%% for prop in service.properties.fields
		prop.{{ prop.name }} = cap<{{ prop.cpp.unsigned_type }}>(java_data->{{ prop.name }}, {{ prop.min_value }}, {{ prop.max_value }});
		%% endfor
		std::memcpy(output.data, &prop, {{ service.name }}Properties::Bytes);
	%% endif
		return {{ service.properties_bytes }};
	}
%% endfor
	default:
		return 0;
	}
}

static inline size_t marshal(ref_t java_desc, Slice<uint32_t> output) {
	return marshal(java_desc,
		slice(reinterpret_cast<uint8_t*>(output.data), output.length * 4));
}

}; // struct ServiceDescription
} // namespace generated
} // namespace awap

#endif // GENERATED_SERVICE_DESCRIPTIONS_HPP
