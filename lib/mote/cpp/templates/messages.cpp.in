/**
 * messages.cpp
 *
 * Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
 *
 * This file is part of awap.
 */


#include <hpp/ostfriesentee.hpp>
#include <jlib_awap-common.hpp>
#include <generated/messages.hpp>

namespace awap {
namespace generated {

static ostfriesentee::Infusion awapCommonInfusion{nullptr};
void MessageFactory::setAwapCommonInfusion(ostfriesentee::Infusion& inf) {
	awapCommonInfusion = inf;
	dj_mem_addSafePointer((void**)&awapCommonInfusion);
}

template<typename T>
static inline constexpr T
cap(const int64_t value, const int64_t min_value, const int64_t max_value)
{
	return static_cast<T>(std::min(max_value, std::max(min_value, value)));
}

%% for service in services
	%% for msg in service.messages

ref_t ::awap::generated::{{ service.name }}::Rx{{ msg.name }}::createSpecificJavaObject() const {
		%% if msg.fields|length == 0
	JavaClass obj(awapCommonInfusion);
	// WARN: needs to be handed to java code before any java memory is allocated
	//       or else it will be garbage collected!
	return obj.getRef();
		%% else
	if(check(this->getSize() <= this->content.length, Warning::MessageParserTooShort)) {
		// create java object
		JavaClass obj(awapCommonInfusion);
		// this is safe, because we checked the length above
		auto java_struct = obj.getUnderlying();
		const auto data = &this->content.data[2];

		// unmarshal
		{{ msg.cpp.unmarshal | indent(2) }}

		// WARN: needs to be handed to java code before any java memory is allocated
		//       or else it will be garbage collected!
		return obj.getRef();
	} else {
		return 0;	// error
	}
		%% endif
}


size_t ::awap::generated::{{ service.name }}::Tx{{ msg.name }}::loadFromSpecificJavaObject(ref_t msg) {
	if(check(this->getSize() <= this->content.length, Warning::MessageParserOutputTooSmall)) {
		%% if msg.fields|length > 0
		auto java_data = static_cast<const JavaClass::UnderlyingType*>(REF_TO_VOIDP(msg));
		%% endif
		// field aliases
		const auto id = Id;
		// cap the data to make sure it can be transmitted and cast to unsigned
		// type in order for the following shift operations to work as intended
		// (logic vs. arithmetic shift)
		%% for field in msg.fields
		const auto {{ field.name }} = cap<{{ field.cpp.unsigned_type }}>(java_data->{{ field.name }}, {{ field.min_value }}, {{ field.max_value }});
		%% endfor

		// marshal, this is safe, because we checked the length above
		auto data = &this->content.data[2];
		{{ msg.cpp.marshal | indent(2) }}

		return this->getDataSize();
	} else {
		return 0;	// error, zero bytes written
	}
}

	%% endfor
%% endfor

} // namespace generated
} // namespace awap
