# SConstruct
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


import os

awap_root  = os.path.join('..', '..')
xpcc_root  = os.path.join(awap_root, 'ext', 'xpcc')
xpcc_tools = os.path.join(xpcc_root, 'scons', 'site_tools')

env = Environment(toolpath = [os.path.join(awap_root, 'scons')], tools = ['awap'])

# use unittest configuration to build lib
env.AppendUnique(AWAP_AGENT_PATH = os.path.join('unittest', 'agents'))
env.AppendUnique(AWAP_COMMUNICATION_PATH = os.path.join('unittest', 'communication'))
env.LoadAwapConfiguration(os.path.join('unittest', 'configuration.xml'))
env.Alias('awap-common', env.SConscript(env['AWAP_LIB_COMMON'], exports = 'env'))

env.Architecture('amd64')
libmote = env.SConscript(env['AWAP_LIB_MOTE'], exports = 'env')
env.Alias('libmote', libmote)

# unittests
xpcc_env = Environment(toolpath = [xpcc_tools], tools = ['xpcc'], configfile = 'unittest/unittest_hosted.cfg')
xpcc_env.XpccLibrary()
files = xpcc_env.FindFiles(path=['unittest'], unittest=True)
# declare a file which later runs all the tests
template = xpcc_root + '/templates/unittest/runner_hosted.cpp.in'
runner = xpcc_env.UnittestRunner(target = xpcc_env.Buildpath('runner.cpp'),
							source = files.header,
							template = template)
# we only compile the unittest sources in cpp/test/*.cpp
# the other files will be compiled to libmote and linked later
source = [runner] + libmote + files.sources
# copy libmote include path
xpcc_env.Append(CPPPATH = env['CPPPATH'])
xpcc_env.Append(CPPPATH = env['AWAP_LIB_MOTE_GENERATED_INCLUDE_PATH'])
xpcc_env.Append(CPPPATH = 'cpp')
program = xpcc_env.Program(target = 'build/unittest', source = source)
env.Alias('build_unittest', program)
env.Alias('unittest', env.Run(program))

env.Default('libmote')
