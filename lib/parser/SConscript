# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


Import('env')
import os

libname = 'awap-parser'
lib_path = os.path.join(env['AWAP_BUILDPATH'], 'lib', libname)

# tell scons how to generate some files
generated_include_path = os.path.join(lib_path, 'generated')
generated_path = os.path.join(generated_include_path, 'generated')
env['AWAP_LIB_PARSER_GENERATED_INCLUDE_PATH'] = generated_include_path
generated_files = []

communication = env.GetCommunicationDict()
templates = env.Glob('cpp/templates/*.in')

for template in templates:
	generated_name = os.path.splitext(os.path.basename(str(template)))[0]
	generated_files += env.Template(
		target=os.path.join(generated_path, generated_name),
		source=template,
		substitutions=communication)

env.Alias(libname + ".generate", generated_files)

# build lib
env['AWAP_LIB_PARSER_INCLUDE'] = os.path.abspath('include')

# build c++ library
env.VariantDir(variant_dir=lib_path, src_dir='cpp')
env.Append(CPPPATH = env['AWAP_LIB_PARSER_INCLUDE'])
source  = env.Glob(os.path.join(lib_path, '*.cpp'))
source += env.Glob(os.path.join(generated_path, '*.cpp'))

lib_env = env.Clone()
lib_env.Append(CPPPATH = 'cpp')
lib_env.Append(CPPPATH = generated_include_path)
libparser = lib_env.SharedLibrary(os.path.join(lib_path, libname), source)

env['AWAP_LIB_PARSER_SO'] = libparser
env.Alias(libname , libparser)
Return('libparser')
