/**
 * messages.cpp
 *
 * Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
 *
 * This file is part of awap.
 */

#include <generated/messages.hpp>

namespace awap {
namespace generated {

// specific enum fields
%% for enum in enums

class {{ enum.name }}EnumMessageField : public IntegerMessageField {
public:
	{{ enum.name }}EnumMessageField(const std::string name)
		: IntegerMessageField(name, {{ enum.min_value }}, {{ enum.max_value }}) {}

	FieldType getType() const override {
		return FieldType::Enum;
	}

	const std::string getStringValue() const override {
		switch(this->value) {
	%% for element in enum.elements
		case {{ element.id }}: return "{{ element.name }}";
	%% endfor
		default: return "Error: InvalidValue";
		}
	}

	bool setValue(const std::string value) override {
	%% for element in enum.elements
		%% if loop.first
		if(value == "{{ element.name }}") {
		%% else
		} else if(value == "{{ element.name }}") {
		%% endif
			this->value = {{ element.id }}; // element.id
			return true;
	%% endfor
		} else {
			return false;
		}
	}

};

%% endfor



// returns negative number on error
int getServiceTypeId(const std::string serviceName)
{
%% for service in services
	%% if loop.first
	if(serviceName == "{{ service.name }}") {
	%% else
	} else if(serviceName == "{{ service.name }}") {
	%% endif
		return {{ service.id }};
%% endfor
	} else {
		return -1;
	}
}

// returns negative number on error
int getMessageTypeId(uint32_t serviceId, const std::string messageName)
{
	switch(serviceId) {
%% for service in services
	case {{ service.id }}: // {{ service.name }}
	%% for msg in service.messages
		%% if loop.first
		if(messageName == "{{ msg.name }}") {
		%% else
		} else if(messageName == "{{ msg.name }}") {
		%% endif
			return {{ msg.id }};
	%% endfor
		} else {
			return -1;
		}
%% endfor
	default:
		return -1;
	}
}


std::unique_ptr<Message> messageFromTypeId(uint32_t serviceId, uint32_t messageId)
{
	switch(serviceId) {
%% for service in services
	case {{ service.id }}: // {{ service.name }}
	switch(messageId) {
	%% for msg in service.messages
	case {{ msg.id }}: // {{ msg.name }}
	{
		MessageTypeProperties prop {
			"{{ service.name }}",	// service.name
			"{{ msg.name }}",	// msg.name
			"{{ msg.performative }}"};	// msg.performative
		prop.size = {{ msg.bytes }};	// msg.bytes
		prop.is_service_tx_message = {{ msg.tx | string | camelCase }};	// msg.tx
		prop.typeId = {{ msg.id }};	// msg.id
		prop.serviceTypeId = {{ service.id }};	// service.id

		std::unique_ptr<BasicMessage> msg(new BasicMessage(prop, {
		%% for field in msg.fields
			%% if field.is_bool
				%% set type = "Boolean"
				%% set params = ""
			%% elif field.is_enum
				%% set type = field.enum_name ~ "Enum"
				%% set params = ""
			%% else
				%% set type = "Integer"
				%% set params = ", " ~ field.min_value ~ ", " ~ field.max_value
			%% endif
			%% if loop.last
			new {{ type }}MessageField("{{ field.name}}"{{ params }})
			%% else
			new {{ type }}MessageField("{{ field.name}}"{{ params }}),
			%% endif
			// {{ field.name }}
		%% endfor
		}));
		return std::move(msg);
	}
	%% endfor
	default:
		return nullptr;	// invalid messageId
	}
%% endfor
	default:
		return nullptr;	// invalid serviceId
	}
}

} // namespace generated
} // namespace awap
