# SConstruct
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


import os

awap_root = os.path.join('..', '..')
xpcc_root  = os.path.join(awap_root, 'ext', 'xpcc')
xpcc_tools = os.path.join(xpcc_root, 'scons', 'site_tools')

env = Environment(toolpath = [os.path.join(awap_root, 'scons')], tools = ['awap'])

env.Architecture('amd64')
# env['CXXFLAGS'].remove('-std=c++11')
# env['CXXFLAGS'].append('-std=c++14')
env['CCFLAGS'].append("-fsanitize=address")
env['LINKFLAGS'].append("-fsanitize=address")

# use unittest configuration from libmote to build lib
com_path = os.path.join('..', 'mote', 'unittest')
env.AppendUnique(AWAP_AGENT_PATH = os.path.join(com_path, 'agents'))
env.AppendUnique(AWAP_COMMUNICATION_PATH = os.path.join(com_path, 'communication'))
env.LoadAwapConfiguration(os.path.join(com_path, 'configuration.xml'))
env.Alias('awap-common', env.SConscript(env['AWAP_LIB_COMMON'], exports = 'env'))

libparser = env.SConscript(env['AWAP_LIB_PARSER'], exports = 'env')
env.Alias('libparser', libparser)

# unittests
xpcc_env = Environment(toolpath = [xpcc_tools], tools = ['xpcc'], configfile = 'unittest/unittest_hosted.cfg')
xpcc_env['CCFLAGS'].append("-fsanitize=address")
xpcc_env['LINKFLAGS'].append("-fsanitize=address")
xpcc_env['CCFLAGS'].append("-DALIGN_32")
xpcc_env.XpccLibrary()
files = xpcc_env.FindFiles(path=['unittest'], unittest=True)
# declare a file which later runs all the tests
template = xpcc_root + '/templates/unittest/runner_hosted.cpp.in'
runner = xpcc_env.UnittestRunner(target = xpcc_env.Buildpath('runner.cpp'),
							source = files.header,
							template = template)
# we only compile the unittest sources in cpp/test/*.cpp
# the other files will be compiled to libmote and linked later
source  = files.sources + runner
source += xpcc_env.FindFiles(path=['unittest'], unittest=False).sources

libpath = os.path.dirname(str(env['AWAP_LIB_PARSER_SO'][0]))
xpcc_env.PrependUnique(LIBPATH = [libpath])
xpcc_env.AppendUnique(LIBS = ['awap-parser'])

# copy libmote include path
xpcc_env.Append(CPPPATH = 'include')
program = xpcc_env.Program(target = 'build/unittest', source = source)
env.Alias('build_unittest', program)

# build run command
run_cmd = 'LD_LIBRARY_PATH={}:$LD_LIBRARY_PATH {}'.format(libpath, program[0].abspath)
env.Alias('unittest', env.Command('run_program', program, run_cmd))

env.Default('libparser')
