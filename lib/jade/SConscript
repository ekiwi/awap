# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>


Import('env')
import os

libname = 'awap-jade'
lib_path = os.path.join(env['AWAP_BUILDPATH'], 'lib', libname)

# tell scons how to generate some files
generated_path = os.path.join(lib_path, 'generated')
generated_files = []

communication = env.GetCommunicationDict()

generated_path = os.path.join(generated_path, *("de.rwth_aachen.awap.jade.generated".split('.')))

# generate communication class
generated_files += env.Template(
	target=os.path.join(generated_path, "Communication.java"),
	source=os.path.join('templates', 'Communication.java.in'),
	substitutions=communication)

generated_files += env.Template(
	target=os.path.join(generated_path, "Service.java"),
	source=os.path.join('templates', 'Service.java.in'),
	substitutions=communication)

generated_files += env.Template(
	target=os.path.join(generated_path, "Enum.java"),
	source=os.path.join('templates', 'Enum.java.in'),
	substitutions=communication)

env.Alias(libname + ".generate", generated_files)

# Java sources
source = ['java'] + generated_files

# build library for jade using a local java enironment
env_java = env.Clone()
env_java.AppendUnique(JAVACLASSPATH=env['AWAP_JADE_JAR'])
env_java.AppendUnique(JAVACLASSPATH='/usr/share/java/json-smart.jar')

env['AWAP_LIB_JADE_JAR'] = os.path.join(lib_path, libname + ".jar")
env_java.AppendUnique(JAVACLASSPATH=env['AWAP_LIB_COMMON_JAR'])
env_java.Depends(env['AWAP_LIB_JADE_JAR'], env['AWAP_LIB_COMMON_JAR'])
libjade_jar = env_java.JavaToJar(env['AWAP_LIB_JADE_JAR'], source)
env.Alias(libname + '.jar', libjade_jar)

Return('libjade_jar')
