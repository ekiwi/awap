package de.rwth_aachen.awap.jade.generated;
import jade.lang.acl.ACLMessage;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;
import de.rwth_aachen.awap.RxMessage;
import de.rwth_aachen.awap.TxMessage;
// service classes that contain the messages
%% for service in services
import de.rwth_aachen.awap.service.{{ service.name }}Client;
import de.rwth_aachen.awap.service.{{ service.name }}Provider;
%% endfor

public class Communication {
	public static ACLMessage awapToJade(TxMessage generic_tx) {
		int performative = ACLMessage.UNKNOWN;
		JSONObject content=new JSONObject();

%% for msg in messages
	%% if msg.tx
		%% set type = msg.service ~ "Provider." ~ msg.name
	%% else
		%% set type = msg.service ~ "Client." ~ msg.name
	%% endif
	%% if loop.first
		if(generic_tx instanceof {{ type }}) {
	%% else
		} else if(generic_tx instanceof {{ type }}) {
	%% endif
			performative = ACLMessage.{{ msg.performative }};
			content.put("service", "{{ msg.service }}");
			content.put("message", "{{ msg.name }}");
	%% for field in msg.fields
		%% if loop.first
			{{ type }} tx = ({{ type }}) generic_tx;
		%% endif
			content.put("{{ field.name }}", tx.{{ field.name }});
	%% endfor
%% endfor
		} else {
			System.out.println("Error: unknown TxMessage in Communication.awapToJade");
		}
		ACLMessage msg = new ACLMessage(performative);
		msg.setContent(content.toJSONString());
		return msg;
	}



	public static RxMessage jadeToAwap(ACLMessage msg) throws Exception {
		JSONObject content = (JSONObject) JSONValue.parse(msg.getContent());
		String service = (String)content.get("service");
		String message = (String)content.get("message");
		int performative = msg.getPerformative();

%% for service in services
	%% if loop.first
		if(service.equals("{{ service.name }}")) {
	%% else
		} else if(service.equals("{{ service.name }}")) {
	%% endif

	%% for msg in service.messages
		%# tx/rx is reversed since we are receiving here!
		%% if msg.tx
		%% set type = service.name ~ "Client." ~ msg.name
		%% else
		%% set type = service.name ~ "Provider." ~ msg.name
		%% endif
		%% if loop.first
			if(message.equals("{{ msg.name }}") && performative == ACLMessage.{{ msg.performative }}) {
		%% else
			} else if(message.equals("{{ msg.name }}") && performative == ACLMessage.{{ msg.performative }}) {
		%% endif
				{{ type }} rx = new {{ type }}();
			%% for field in msg.fields
				// unboxing...
				// FIXME: this only works as long as all of our values are either int, short or byte...
				int {{ field.name }} = (Integer)content.get("{{ field.name }}");
				rx.{{ field.name }} = ({{ field.java.type }}){{ field.name }};

			%% endfor
				return rx;
	%% endfor
			}
%% endfor
		}
		throw new Exception("Invalid Message!");
	}
}
