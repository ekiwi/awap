package de.rwth_aachen.awap.jade.generated;
import jade.lang.acl.ACLMessage;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;
import de.rwth_aachen.awap.Agent;
import de.rwth_aachen.awap.Message;
import de.rwth_aachen.awap.RemoteAgent;
import de.rwth_aachen.awap.jade.AgentRegistry;


public class Communication {
	public static ACLMessage awapToJade(Message generic_tx) throws Exception {
		int performative = ACLMessage.UNKNOWN;
		JSONObject content=new JSONObject();

		if(generic_tx.remoteService) {
			content.put("receiver-is-service-provider", "yes");
		} else {
			content.put("receiver-is-service-provider", "no");
		}
		content.put("service-id" , generic_tx.serviceId);

%% for msg in messages
	%% if msg.tx
		%% set type = "de.rwth_aachen.awap.service.local." ~ msg.service ~ "." ~ msg.name
	%% else
		%% set type = "de.rwth_aachen.awap.service.remote." ~ msg.service ~ "." ~ msg.name
	%% endif
	%% if loop.first
		if(generic_tx instanceof {{ type }}) {
	%% else
		} else if(generic_tx instanceof {{ type }}) {
	%% endif
			performative = ACLMessage.{{ msg.performative }};
			content.put("service", "{{ msg.service }}");
			content.put("message", "{{ msg.name }}");
	%% for field in msg.fields
		%% if loop.first
			{{ type }} tx = ({{ type }}) generic_tx;
		%% endif
			content.put("{{ field.name }}", tx.{{ field.name }});
	%% endfor
%% endfor
		} else {
			throw new Exception("Error: unknown Message");
		}
		ACLMessage msg = new ACLMessage(performative);
		msg.setContent(content.toJSONString());
		return msg;
	}



	public static Message jadeToAwap(ACLMessage msg) throws Exception {
		JSONObject content = (JSONObject) JSONValue.parse(msg.getContent());
		String service = (String)content.get("service");
		String message = (String)content.get("message");
		int performative = msg.getPerformative();
		Message rx = null;

%% for service in services
	%% if loop.first
		if(service.equals("{{ service.name }}")) {
	%% else
		} else if(service.equals("{{ service.name }}")) {
	%% endif

	%% for msg in service.messages
		%# tx/rx is reversed since we are receiving here!
		%% if msg.tx
			%% set type = "de.rwth_aachen.awap.service.remote." ~ msg.service ~ "." ~ msg.name
		%% else
			%% set type = "de.rwth_aachen.awap.service.local." ~ msg.service ~ "." ~ msg.name
		%% endif
		%% if loop.first
			if(message.equals("{{ msg.name }}") && performative == ACLMessage.{{ msg.performative }}) {
		%% else
			} else if(message.equals("{{ msg.name }}") && performative == ACLMessage.{{ msg.performative }}) {
		%% endif
				{{ type }} specific_rx = new {{ type }}();
			%% for field in msg.fields
				// unboxing...
				%% if field.is_bool
				specific_rx.{{ field.name }} = (Boolean)content.get("{{ field.name }}");
				%% else
				// FIXME: this only works as long as all of our values are either int, short or byte...
				int {{ field.name }} = (Integer)content.get("{{ field.name }}");
				specific_rx.{{ field.name }} = ({{ field.java.type }}){{ field.name }};
				%% endif
			%% endfor
				rx = specific_rx;
	%% endfor
			} else {
				throw new Exception("Unknown message type: " + message + ", for service type: " + service);
			}
%% endfor
		} else {
			throw new Exception("Unknown service type: " + service);
		}

		String receiverIsServiceProvider = (String)content.get("receiver-is-service-provider");
		rx.remoteService = !receiverIsServiceProvider.equals("yes");
		int serviceId = (Integer)content.get("service-id");
		rx.serviceId = (byte)serviceId;
		rx.remoteAgent = new RemoteAgent();
		rx.remoteAgent.id = AgentRegistry.getId(msg.getSender());

		return rx;
	}

	public static boolean dispatchRemoteServiceMessage(Agent agent, Message msg) {
		if(msg.remoteService) {
%% set first = True
%% for service in services
	%% set interface_type = "de.rwth_aachen.awap.service.remote.I" ~ service.name ~ "Client"
	%% for msg in service.messages
		%# tx/rx is reversed since we are receiving here!
		%% if msg.tx
			%% set type = "de.rwth_aachen.awap.service.remote." ~ service.name ~ "." ~ msg.name
			%% if first
				%% set first = False
			if(msg instanceof {{ type }}) {
			%% else
			} else if(msg instanceof {{ type }}) {
			%% endif
				(({{ interface_type }})agent).onReceive(
					({{ type }})msg);
				return true;
		%% endif
	%% endfor
			}
%% endfor
		}
		return false;
	}
}
